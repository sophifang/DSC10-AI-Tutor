tag,content
pre input,"# Run this cell to set up packages for lecture.
from lec04_imports import *"
h1,Lecture 4 ‚Äì  Arrays and DataFrames
h2,"DSC 10, Spring 2024"
h3,Announcements
li,"Lab 1 is due tomorrow at 11:59PM.
Submit early and avoid submission errors."
li,"Quiz 1 is coming up on Friday in your assigned quiz session.
You should have been assigned a quiz time in an email with subject ""DSC 10 Quiz Time"".
This will be a 20 minute paper-based quiz consisting of short answer and multiple choice questions. 
No aids are allowed (no notes, no calculators, no computers, no reference sheet). Questions are designed with this in mind.
The quiz covers Lectures 1 through 4, or BPD 1-9 in the babypandas notes. 
Review both of these materials to study.
Attend discussion section on Wednesday to work on practice problems.
Homework 1 is due next week, but working on the homework is excellent preparation for the quiz."
li,Come to office hours (see the schedule here) and post on Ed for help!
h3,Agenda
li,Arrays.
li,Ranges.
li,DataFrames.
h4,Note:
li,Remember to check the resources tab of the course website for programming resources.
li,"Some key links moving forward:
DSC 10 reference sheet.
babypandas notes.
babypandas documentation."
h2,Arrays
h3,Recap: arrays
li,Arrays are provided by a module called numpy that we need to import to use.
pre input,import numpy as np
li,Arrays store sequences of values of the same data type.
li,"To create an array, we pass a list as input to the np.array function."
pre input,"temperature_array = np.array([68, 73, 70, 74, 76, 72, 74])
temperature_array"
pre output,"array([68, 73, 70, 74, 76, 72, 74])"
li,Use square brackets with the position number to access an array element. The first element is in position 0.
pre input,temperature_array
pre output,"array([68, 73, 70, 74, 76, 72, 74])"
pre input,temperature_array[1]
pre output,73
h3,Array-number arithmetic
p,"Arrays make it easy to perform the same operation to every element. This behavior is formally known as ""broadcasting""."
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec04/images/broadcasting.jpg
pre input,temperature_array
pre output,"array([68, 73, 70, 74, 76, 72, 74])"
pre input,"# Convert all temperatures to Celsius.
(5 / 9) * (temperature_array - 32)"
pre output,"array([20.  , 22.78, 21.11, 23.33, 24.44, 22.22, 23.33])"
h3,Element-wise arithmetic
li,"We can apply arithmetic operations to multiple arrays, provided they have the same length."
li,"The result is computed element-wise, which means that the arithmetic operation is applied to one pair of elements from each array at a time."
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec04/images/elementwise.jpg
pre input,"a = np.array([4, 5, -1])
b = np.array([2, 3, 2])"
pre input,a ** 2 + b ** 2
pre output,"array([20, 34,  5])"
h3,Array methods
li,"Arrays work with a variety of methods, which are functions designed to operate specifically on arrays."
p,"Arrays work with a variety of methods, which are functions designed to operate specifically on arrays."
li,"Call these methods using dot notation, e.g. array_name.method()."
p,"Call these methods using dot notation, e.g. array_name.method()."
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec04/images/methods.jpg
pre input,temperature_array.max()
pre output,76
pre input,temperature_array.mean()
pre output,72.42857142857143
h2,Ranges
h3,Motivation
p,We often find ourselves needing to make arrays like this:
pre input,"day_of_month = np.array([
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 
    13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
    23, 24, 25, 26, 27, 28, 29, 30, 31
])"
p,There needs to be an easier way to do this!
h3,Ranges
li,A range is an array of evenly spaced numbers. We create ranges using np.arange.
li,"The most general way to create a range is np.arange(start, end, step). This returns an array such that:
The first number is start. By default, start is 0.
All subsequent numbers are spaced out by step, until (but excluding) end. By default, step is 1."
pre input,"# Start at 0, end before 8, step by 1.
# This will be our most common use-case!
np.arange(8)"
pre output,"array([0, 1, 2, 3, 4, 5, 6, 7])"
pre input,"# Start at 5, end before 10, step by 1.
np.arange(5, 10)"
pre output,"array([5, 6, 7, 8, 9])"
pre input,"# Start at 3, end before 32, step by 5.
np.arange(3, 32, 5)"
pre output,"array([ 3,  8, 13, 18, 23, 28])"
pre input,"np.arange(-3, 2, 0.5)

np.arange(1, -10, -3)"
h3,Extra practice
p,"The step size in np.arange can be fractional, or even negative. Predict what arrays will be produced by each line of code below. Then copy each line into a code cell and run it to see if you're right."
pre input,...
pre output,Ellipsis
pre input,...
pre output,Ellipsis
h3,Challenge
p,"üéâ Congrats! üéâ You won the lottery üí∞. Here's how your payout works: on the first day of September, you are paid \$0.01. Every day thereafter, your pay doubles, so on the second day you're paid \\$0.02, on the third day you're paid \$0.04, on the fourth day you're paid \\$0.08, and so on."
p,September has 30 days.
p,"Write a one-line expression that uses the numbers 2 and 30, along with the function np.arange and the method .sum(), that computes the total amount in dollars you will be paid in September."
pre input,...
pre output,Ellipsis
p,"After trying the challenge problem on your own, watch this walkthrough üé• video."
h2,DataFrames
h3,pandas
li,"pandas is a Python package that allows us to work with tabular data ‚Äì that is, data in the form of a table that we might otherwise work with as a spreadsheet (in Excel or Google Sheets)."
li,pandas is the tool for doing data science in Python.
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec04/images/pandas.png
h3,But pandas is not so cute...
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec04/images/angrypanda.jpg
h3,Enter babypandas!
li,"We at UCSD have created a smaller, nicer version of pandas called babypandas."
li,It keeps the important stuff and has much better error messages.
li,"It's easier to learn, but is still valid pandas code. You are learning pandas!
Think of it like learning how to build LEGOs with many, but not all, of the possible Lego blocks. You're still learning how to build LEGOs, and you can still build cool things!"
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec04/images/babypanda.jpg
h3,DataFrames in babypandas üêº
li,"Tables in babypandas (and pandas) are called ""DataFrames."""
li,"To use DataFrames, we'll need to import babypandas."
pre input,import babypandas as bpd
h3,Reading data from a file üìñ
li,"We'll usually work with data stored in the CSV format. CSV stands for ""comma-separated values."""
p,"We'll usually work with data stored in the CSV format. CSV stands for ""comma-separated values."""
li,"We can read in a CSV using bpd.read_csv(...). Replace the ... with a path to the CSV file relative to your notebook; if the file is in the same folder as your notebook, this is just the name of the file."
p,"We can read in a CSV using bpd.read_csv(...). Replace the ... with a path to the CSV file relative to your notebook; if the file is in the same folder as your notebook, this is just the name of the file."
pre input,"# Our CSV file is stored not in the same folder as our notebook, 
# but within a folder called data.
states = bpd.read_csv('data/states.csv')
states"
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party'], ['0', 'Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican'], ['2', 'Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican'], ['3', 'Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican'], ['4', 'California', 'West', 'Sacramento', '39538223', '155779', 'Democratic'], ['...', '...', '...', '...', '...', '...', '...'], ['45', 'Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic'], ['46', 'Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic'], ['47', 'West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican'], ['48', 'Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican']]"
p,50 rows √ó 6 columns
h3,About the data üóΩ
p,"Most of the data is self-explanatory, but there are a few things to note:"
li,'Population' figures come from the 2020 census.
li,'Land Area' is measured in square miles.
li,"The 'Region' column places each state in one of four regions, as determined by the US Census Bureau."
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec04/images/regions.png
li,The 'Party' column classifies each state as 'Democratic' or 'Republican' based on a political science measurement called the Cook Partisan Voter Index.
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec04/images/party.png
h3,Structure of a DataFrame
li,"DataFrames have columns and rows.
Think of each column as an array. Columns contain data of the same type."
li,"Each column has a label, e.g. 'Capital City' and 'Land Area'.
Column labels are stored as strings."
li,"Each row has a label too ‚Äì these are shown in bold at the start of the row.
Right now, the row labels are 0, 1, 2, and so on.
Together, the row labels are called the index. The index is not a column!"
pre input,"# This DataFrame has 50 rows and 6 columns.
states"
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party'], ['0', 'Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican'], ['2', 'Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican'], ['3', 'Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican'], ['4', 'California', 'West', 'Sacramento', '39538223', '155779', 'Democratic'], ['...', '...', '...', '...', '...', '...', '...'], ['45', 'Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic'], ['46', 'Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic'], ['47', 'West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican'], ['48', 'Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican']]"
p,50 rows √ó 6 columns
h2,Example 1: Population density
p,"Key concepts: Accessing columns, performing calculations with them, and adding new columns."
h3,Finding population density
p,"Question: What is the population density of each state, in people per square mile?"
pre input,states
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party'], ['0', 'Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican'], ['2', 'Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican'], ['3', 'Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican'], ['4', 'California', 'West', 'Sacramento', '39538223', '155779', 'Democratic'], ['...', '...', '...', '...', '...', '...', '...'], ['45', 'Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic'], ['46', 'Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic'], ['47', 'West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican'], ['48', 'Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican']]"
p,50 rows √ó 6 columns
li,"We have, separately, the population and land area of each state."
li,"Steps:
Get the 'Population' column.
Get the 'Land Area' column.
Divide these columns element-wise.
Add a new column to the DataFrame with these results."
h4,Step 1 ‚Äì Getting the 'Population' column
li,We can get a column from a DataFrame using .get(column_name).
li,üö® Column names are case sensitive!
li,"Column names are strings, so we need to use quotes."
li,"The result looks like a 1-column DataFrame, but is actually a Series."
pre input,states
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party'], ['0', 'Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican'], ['2', 'Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican'], ['3', 'Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican'], ['4', 'California', 'West', 'Sacramento', '39538223', '155779', 'Democratic'], ['...', '...', '...', '...', '...', '...', '...'], ['45', 'Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic'], ['46', 'Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic'], ['47', 'West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican'], ['48', 'Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican']]"
p,50 rows √ó 6 columns
pre input,states.get('Population')
pre output,"0      5024279
1       733391
2      7151502
3      3011524
4     39538223
        ...   
45     8631393
46     7705281
47     1793716
48     5893718
49      576851
Name: Population, Length: 50, dtype: int64"
h3,Digression: Series
li,"A Series is like an array, but with an index."
li,"In particular, Series support arithmetic, just like arrays."
pre input,states.get('Population')
pre output,"0      5024279
1       733391
2      7151502
3      3011524
4     39538223
        ...   
45     8631393
46     7705281
47     1793716
48     5893718
49      576851
Name: Population, Length: 50, dtype: int64"
pre input,type(states.get('Population'))
pre output,babypandas.bpd.Series
h4,Steps 2 and 3 ‚Äì Getting the 'Land Area' column and dividing element-wise
pre input,states.get('Land Area')
pre output,"0      50645
1     570641
2     113594
3      52035
4     155779
       ...  
45     39490
46     66456
47     24038
48     54158
49     97093
Name: Land Area, Length: 50, dtype: int64"
li,"Just like with arrays, we can perform arithmetic operations with two Series, as long as they have the same length and same index."
li,"Operations happen element-wise (by matching up corresponding index values), and the result is also a Series."
pre input,states.get('Population') / states.get('Land Area')
pre output,"0      99.21
1       1.29
2      62.96
3      57.87
4     253.81
       ...  
45    218.57
46    115.95
47     74.62
48    108.82
49      5.94
Length: 50, dtype: float64"
h4,Step 4 ‚Äì Adding the densities to the DataFrame as a new column
li,"Use .assign(name_of_column=data_in_series) to assign a Series (or array, or list) to a DataFrame."
li,üö® Don't put quotes around name_of_column.
li,"This creates a new DataFrame, which we must save to a variable if we want to keep using it."
pre input,"states.assign(
    Density=states.get('Population') / states.get('Land Area')
)"
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party', 'Density'], ['0', 'Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican', '99.21'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican', '1.29'], ['2', 'Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican', '62.96'], ['3', 'Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican', '57.87'], ['4', 'California', 'West', 'Sacramento', '39538223', '155779', 'Democratic', '253.81'], ['...', '...', '...', '...', '...', '...', '...', '...'], ['45', 'Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic', '218.57'], ['46', 'Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic', '115.95'], ['47', 'West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican', '74.62'], ['48', 'Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican', '108.82'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican', '5.94']]"
p,50 rows √ó 7 columns
pre input,states
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party'], ['0', 'Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican'], ['2', 'Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican'], ['3', 'Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican'], ['4', 'California', 'West', 'Sacramento', '39538223', '155779', 'Democratic'], ['...', '...', '...', '...', '...', '...', '...'], ['45', 'Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic'], ['46', 'Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic'], ['47', 'West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican'], ['48', 'Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican']]"
p,50 rows √ó 6 columns
pre input,"states = states.assign(
    Density=states.get('Population') / states.get('Land Area')
)
states"
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party', 'Density'], ['0', 'Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican', '99.21'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican', '1.29'], ['2', 'Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican', '62.96'], ['3', 'Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican', '57.87'], ['4', 'California', 'West', 'Sacramento', '39538223', '155779', 'Democratic', '253.81'], ['...', '...', '...', '...', '...', '...', '...', '...'], ['45', 'Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic', '218.57'], ['46', 'Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic', '115.95'], ['47', 'West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican', '74.62'], ['48', 'Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican', '108.82'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican', '5.94']]"
p,50 rows √ó 7 columns
h2,Example 2: Exploring population density
p,Key concept: Computing statistics of columns using Series methods.
h3,Questions
li,What is the highest population density of any one state?
li,What is the average population density across all states?
p,"Series, like arrays, have helpful methods, including .min(), .max(), and .mean()."
pre input,states.get('Density').max()
pre output,1263.1212945335872
p,What state does this correspond to? We'll see how to find out shortly!
p,Other statistics:
pre input,states.get('Density').min()
pre output,1.2852055845969708
pre input,states.get('Density').mean()
pre output,206.54513507096465
pre input,states.get('Density').median()
pre output,108.31649013462203
pre input,"# Lots of information at once!
states.get('Density').describe()"
pre output,"count      50.00
mean      206.55
std       274.93
min         1.29
25%        47.06
50%       108.32
75%       224.57
max      1263.12
Name: Density, dtype: float64"
h2,Example 3: Which state has the highest population density?
p,Key concepts: Sorting. Accessing using integer positions.
h4,Step 1  ‚Äì Sorting the DataFrame
li,"Use the .sort_values(by=column_name) method to sort.
The by= can be omitted, but helps with readability."
li,"Like most DataFrame methods, this returns a new DataFrame."
pre input,states.sort_values(by='Density')
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party', 'Density'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican', '1.29'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican', '5.94'], ['25', 'Montana', 'West', 'Helena', '1084225', '145546', 'Republican', '7.45'], ['33', 'North Dakota', 'Midwest', 'Bismarck', '779094', '69001', 'Republican', '11.29'], ['40', 'South Dakota', 'Midwest', 'Pierre', '886667', '75811', 'Republican', '11.70'], ['...', '...', '...', '...', '...', '...', '...', '...'], ['19', 'Maryland', 'South', 'Annapolis', '6177224', '9707', 'Democratic', '636.37'], ['6', 'Connecticut', 'Northeast', 'Hartford', '3605944', '4842', 'Democratic', '744.72'], ['20', 'Massachusetts', 'Northeast', 'Boston', '7029917', '7800', 'Democratic', '901.27'], ['38', 'Rhode Island', 'Northeast', 'Providence', '1097379', '1034', 'Democratic', '1061.29'], ['29', 'New Jersey', 'Northeast', 'Trenton', '9288994', '7354', 'Democratic', '1263.12']]"
p,50 rows √ó 7 columns
p,"This sorts, but in ascending order (small to large). The opposite would be nice!"
h4,Step 1 ‚Äì Sorting the DataFrame in descending order
li,"Use .sort_values(by=column_name, ascending=False) to sort in descending order."
li,"ascending is an optional argument. If omitted, it will be set to True by default.
This is an example of a keyword argument, or a named argument.
If we want to specify the sorting order, we must use the keyword ascending=."
pre input,"ordered_states = states.sort_values(by='Density', ascending=False)
ordered_states"
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party', 'Density'], ['29', 'New Jersey', 'Northeast', 'Trenton', '9288994', '7354', 'Democratic', '1263.12'], ['38', 'Rhode Island', 'Northeast', 'Providence', '1097379', '1034', 'Democratic', '1061.29'], ['20', 'Massachusetts', 'Northeast', 'Boston', '7029917', '7800', 'Democratic', '901.27'], ['6', 'Connecticut', 'Northeast', 'Hartford', '3605944', '4842', 'Democratic', '744.72'], ['19', 'Maryland', 'South', 'Annapolis', '6177224', '9707', 'Democratic', '636.37'], ['...', '...', '...', '...', '...', '...', '...', '...'], ['40', 'South Dakota', 'Midwest', 'Pierre', '886667', '75811', 'Republican', '11.70'], ['33', 'North Dakota', 'Midwest', 'Bismarck', '779094', '69001', 'Republican', '11.29'], ['25', 'Montana', 'West', 'Helena', '1084225', '145546', 'Republican', '7.45'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican', '5.94'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican', '1.29']]"
p,50 rows √ó 7 columns
pre input,"# We must specify the role of False by using ascending=, 
# otherwise Python does not know how to interpret this.
states.sort_values(by='Density', False)"
pre output,"File ""/var/folders/28/vs8cp38n1r1520g8bhzr4v5h0000gn/T/ipykernel_17650/2563070448.py"", line 3
    states.sort_values(by='Density', False)
                                          ^
SyntaxError: positional argument follows keyword argument"
h4,Step 2 ‚Äì Extracting the state name
li,"We saw that the most densely populated state is New Jersey, but how do we extract that information using code?"
li,"First, grab an entire column as a Series."
li,"Navigate to a particular entry of the Series using .iloc[integer_position].
iloc stands for ""integer location"" and is used to count the rows, starting at 0."
pre input,ordered_states
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party', 'Density'], ['29', 'New Jersey', 'Northeast', 'Trenton', '9288994', '7354', 'Democratic', '1263.12'], ['38', 'Rhode Island', 'Northeast', 'Providence', '1097379', '1034', 'Democratic', '1061.29'], ['20', 'Massachusetts', 'Northeast', 'Boston', '7029917', '7800', 'Democratic', '901.27'], ['6', 'Connecticut', 'Northeast', 'Hartford', '3605944', '4842', 'Democratic', '744.72'], ['19', 'Maryland', 'South', 'Annapolis', '6177224', '9707', 'Democratic', '636.37'], ['...', '...', '...', '...', '...', '...', '...', '...'], ['40', 'South Dakota', 'Midwest', 'Pierre', '886667', '75811', 'Republican', '11.70'], ['33', 'North Dakota', 'Midwest', 'Bismarck', '779094', '69001', 'Republican', '11.29'], ['25', 'Montana', 'West', 'Helena', '1084225', '145546', 'Republican', '7.45'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican', '5.94'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican', '1.29']]"
p,50 rows √ó 7 columns
pre input,ordered_states.get('State')
pre output,"29       New Jersey
38     Rhode Island
20    Massachusetts
6       Connecticut
19         Maryland
          ...      
40     South Dakota
33     North Dakota
25          Montana
49          Wyoming
1            Alaska
Name: State, Length: 50, dtype: object"
pre input,"# We want the first entry of the Series, which is at ""integer location"" 0.
ordered_states.get('State').iloc[0]"
pre output,'New Jersey'
li,"The row label that goes with New Jersey is 29, because our original data was alphabetized by state and New Jersey is the 30th state alphabetically. But we don't use the row label when accessing with iloc; we use the integer position counting from the top."
li,"If we try to use the row label (29) with iloc, we get the state with the 30th highest population density, which is not New Jersey."
pre input,ordered_states.get('State').iloc[29]
pre output,'Minnesota'
h2,Example 4: What is the population density of Pennsylvania?
p,Key concept: Accessing using row labels.
h3,Population density of Pennsylvania
p,We know how to get the 'Density' of all states. How do we find the one that corresponds to Pennsylvania?
pre input,states
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party', 'Density'], ['0', 'Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican', '99.21'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican', '1.29'], ['2', 'Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican', '62.96'], ['3', 'Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican', '57.87'], ['4', 'California', 'West', 'Sacramento', '39538223', '155779', 'Democratic', '253.81'], ['...', '...', '...', '...', '...', '...', '...', '...'], ['45', 'Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic', '218.57'], ['46', 'Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic', '115.95'], ['47', 'West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican', '74.62'], ['48', 'Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican', '108.82'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican', '5.94']]"
p,50 rows √ó 7 columns
pre input,"# Which one is Pennsylvania?
states.get('Density')"
pre output,"0      99.21
1       1.29
2      62.96
3      57.87
4     253.81
       ...  
45    218.57
46    115.95
47     74.62
48    108.82
49      5.94
Name: Density, Length: 50, dtype: float64"
h3,Utilizing the index
li,"When we load in a DataFrame from a CSV, columns have meaningful names, but rows do not."
pre input,bpd.read_csv('data/states.csv')
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party'], ['0', 'Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican'], ['2', 'Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican'], ['3', 'Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican'], ['4', 'California', 'West', 'Sacramento', '39538223', '155779', 'Democratic'], ['...', '...', '...', '...', '...', '...', '...'], ['45', 'Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic'], ['46', 'Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic'], ['47', 'West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican'], ['48', 'Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican']]"
p,50 rows √ó 6 columns
li,"The row labels (or the index) are how we refer to specific rows. Instead of using numbers, let's refer to these rows by the names of the states they correspond to."
li,"This way, we can easily identify, for example, which row corresponds to Pennsylvania."
h3,Setting the index
li,"To change the index, use .set_index(column_name)."
li,"Row labels should be unique identifiers.
Each row should have a different, descriptive name that corresponds to the contents of that row's data."
pre input,states
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party', 'Density'], ['0', 'Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican', '99.21'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican', '1.29'], ['2', 'Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican', '62.96'], ['3', 'Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican', '57.87'], ['4', 'California', 'West', 'Sacramento', '39538223', '155779', 'Democratic', '253.81'], ['...', '...', '...', '...', '...', '...', '...', '...'], ['45', 'Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic', '218.57'], ['46', 'Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic', '115.95'], ['47', 'West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican', '74.62'], ['48', 'Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican', '108.82'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican', '5.94']]"
p,50 rows √ó 7 columns
pre input,states.set_index('State')
table,"[['', 'Region', 'Capital City', 'Population', 'Land Area', 'Party', 'Density'], ['State', '', '', '', '', '', ''], ['Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican', '99.21'], ['Alaska', 'West', 'Juneau', '733391', '570641', 'Republican', '1.29'], ['Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican', '62.96'], ['Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican', '57.87'], ['California', 'West', 'Sacramento', '39538223', '155779', 'Democratic', '253.81'], ['...', '...', '...', '...', '...', '...', '...'], ['Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic', '218.57'], ['Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic', '115.95'], ['West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican', '74.62'], ['Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican', '108.82'], ['Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican', '5.94']]"
p,50 rows √ó 6 columns
li,"Now there is one fewer column. When you set the index, a column becomes the index, and the old index disappears."
li,"üö® Like most DataFrame methods, .set_index returns a new DataFrame; it does not modify the original DataFrame."
pre input,states
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party', 'Density'], ['0', 'Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican', '99.21'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican', '1.29'], ['2', 'Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican', '62.96'], ['3', 'Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican', '57.87'], ['4', 'California', 'West', 'Sacramento', '39538223', '155779', 'Democratic', '253.81'], ['...', '...', '...', '...', '...', '...', '...', '...'], ['45', 'Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic', '218.57'], ['46', 'Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic', '115.95'], ['47', 'West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican', '74.62'], ['48', 'Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican', '108.82'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican', '5.94']]"
p,50 rows √ó 7 columns
pre input,"states = states.set_index('State')
states"
table,"[['', 'Region', 'Capital City', 'Population', 'Land Area', 'Party', 'Density'], ['State', '', '', '', '', '', ''], ['Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican', '99.21'], ['Alaska', 'West', 'Juneau', '733391', '570641', 'Republican', '1.29'], ['Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican', '62.96'], ['Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican', '57.87'], ['California', 'West', 'Sacramento', '39538223', '155779', 'Democratic', '253.81'], ['...', '...', '...', '...', '...', '...', '...'], ['Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic', '218.57'], ['Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic', '115.95'], ['West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican', '74.62'], ['Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican', '108.82'], ['Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican', '5.94']]"
p,50 rows √ó 6 columns
pre input,"# Which one is Pennsylvania? The one whose row label is ""Pennsylvania""!
states.get('Density')"
pre output,"State
Alabama           99.21
Alaska             1.29
Arizona           62.96
Arkansas          57.87
California       253.81
                  ...  
Virginia         218.57
Washington       115.95
West Virginia     74.62
Wisconsin        108.82
Wyoming            5.94
Name: Density, Length: 50, dtype: float64"
h3,Accessing using the row label
p,To pull out one particular entry of a DataFrame corresponding to a row and column with certain labels:
li,Use .get(column_name) to extract the entire column as a Series.
li,Use .loc[] to access the element of a Series with a particular row label.
p,"In this class, we'll always first access a column, then a row (but row, then column is also possible)."
pre input,states.get('Density')
pre output,"State
Alabama           99.21
Alaska             1.29
Arizona           62.96
Arkansas          57.87
California       253.81
                  ...  
Virginia         218.57
Washington       115.95
West Virginia     74.62
Wisconsin        108.82
Wyoming            5.94
Name: Density, Length: 50, dtype: float64"
pre input,states.get('Density').loc['Pennsylvania']
pre output,290.60858681804973
h3,Summary: Accessing elements of a DataFrame
li,"First, .get the appropriate column as a Series."
li,"Then, use one of two ways to access an element of a Series:
.iloc[] uses the integer position.
.loc[] uses the row label.
Each is best for different scenarios."
pre input,states.get('Density')
pre output,"State
Alabama           99.21
Alaska             1.29
Arizona           62.96
Arkansas          57.87
California       253.81
                  ...  
Virginia         218.57
Washington       115.95
West Virginia     74.62
Wisconsin        108.82
Wyoming            5.94
Name: Density, Length: 50, dtype: float64"
pre input,states.get('Density').iloc[4]
pre output,253.80971119342146
pre input,states.get('Density').loc['California']
pre output,253.80971119342146
h3,Note
li,Sometimes the integer position and row label are the same.
li,This happens by default with bpd.read_csv.
pre input,bpd.read_csv('data/states.csv')
table,"[['', 'State', 'Region', 'Capital City', 'Population', 'Land Area', 'Party'], ['0', 'Alabama', 'South', 'Montgomery', '5024279', '50645', 'Republican'], ['1', 'Alaska', 'West', 'Juneau', '733391', '570641', 'Republican'], ['2', 'Arizona', 'West', 'Phoenix', '7151502', '113594', 'Republican'], ['3', 'Arkansas', 'South', 'Little Rock', '3011524', '52035', 'Republican'], ['4', 'California', 'West', 'Sacramento', '39538223', '155779', 'Democratic'], ['...', '...', '...', '...', '...', '...', '...'], ['45', 'Virginia', 'South', 'Richmond', '8631393', '39490', 'Democratic'], ['46', 'Washington', 'West', 'Olympia', '7705281', '66456', 'Democratic'], ['47', 'West Virginia', 'South', 'Charleston', '1793716', '24038', 'Republican'], ['48', 'Wisconsin', 'Midwest', 'Madison', '5893718', '54158', 'Republican'], ['49', 'Wyoming', 'West', 'Cheyenne', '576851', '97093', 'Republican']]"
p,50 rows √ó 6 columns
pre input,bpd.read_csv('data/states.csv').get('Capital City').loc[35]
pre output,'Oklahoma City'
pre input,bpd.read_csv('data/states.csv').get('Capital City').iloc[35]
pre output,'Oklahoma City'
h2,"Summary, next time"
h3,Summary
li,Arrays make it easy to perform arithmetic operations on all elements of an array and to perform element-wise operations on multiple arrays.
li,Ranges are arrays of equally-spaced numbers.
li,We learned many DataFrame methods and techniques. Don't feel the need to memorize them all right away.
li,"Instead, refer to this lecture, the DSC 10 reference sheet, the babypandas notes, and the babypandas documentation when working on assignments."
li,"Over time, these techniques will become more and more familiar. Lab 1 will walk you through many of them."
li,Practice! Frame your own questions using this dataset and try to answer them.
h3,Next time
p,"We'll frame more questions and learn more DataFrame manipulation techniques to answer them. In particular, we'll learn about querying and grouping."
