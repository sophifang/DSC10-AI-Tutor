tag,content
pre input,"# Run this cell to set up packages for lecture.
from lec02_imports import *"
h1,Lecture 2 – Expressions and Data Types
h2,"DSC 10, Spring 2024"
h3,Announcements
li,"Everything you need for this class is at dsc10.com. This class does not use Canvas.
If you recently enrolled, you should get access to Gradescope and DataHub in about 24 hours."
li,"Discussion is today at 2PM, 3PM, or 4PM in Center 109. Today's section will focus on Python basics and Jupyter notebooks. Come to any section."
li,"Lab 0 is out, due on Saturday, April 6 at 11:59PM.
Watch the 🎥 video towards the end on how to navigate DataHub and Jupyter notebooks."
li,"Please fill out the Welcome Survey as soon as possible; here you can let us know your time preferences for quizzes.
We'll get back to you by Monday to let you know your assigned quiz time."
li,"The office hours schedule is now posted, and office hours start today in HDSI 155. Please visit!"
li,Join Ed and post questions!
h3,Python Bootcamp
p,"Next week, the student organization Diversity in Data Science is hosting a Python bootcamp specifically for students in DSC 10 who are new to programming. Feel free to sign up!"
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec02/images/bootcamp.jpg
h3,Agenda
li,What is code? What are Jupyter Notebooks?
li,Expressions.
li,Variables.
li,Calling functions.
li,Data types.
p,"There will be lots of programming – follow along in the notebook by clicking the ""Expressions and Data Types"" link on the course website."
h2,What is code? What are Jupyter Notebooks? 💻
h3,What is code?
li,"Instructions for computers are written in programming languages, and are referred to as code."
li,"“Computer programs” are nothing more than recipes: we write programs that tell the computer exactly what to do, and it does exactly that – nothing more, and nothing less."
h3,Why Python?
li,It's popular!
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec02/images/languages.jpg
li,"It has a variety of use cases. Some examples:
Web development.
Data science and machine learning.
Scripting and automation."
li,It's (relatively) easy to dive right in! 🏊
h3,Jupyter Notebooks 📓
li,"Often, but not in this class, code is written in a text editor and then run in a command-line interface (or both steps are done in an IDE)."
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec02/images/terminal.png
li,Jupyter Notebooks allow us to write and run code within a single document. They also allow us to embed text and code. We will be using Jupyter Notebooks throughout the quarter.
li,DataHub is a server that allows you to run Jupyter Notebooks from your web browser without having to install any software locally.
h3,Aside: Lecture slides
li,The lecture slides you're viewing right now are also in the form of a Jupyter Notebook – we're just using an extension (called RISE) to make them look like slides.
li,"When you click a lecture DataHub link on the course website, you'll see the lecture notebook in regular notebook form."
li,"To view it in slides form, click the bar chart button in the toolbar."
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec02/images/rise.png
h2,Expressions
h3,Python as a calculator
li,"An expression is a combination of values, operators, and functions that evaluates to some value."
li,"For now, let's think of Python like a calculator – it takes expressions and evaluates them."
li,"We will enter our expressions in code cells. To run a code cell, either:
Hit shift + enter (or shift + return) on your keyboard (strongly preferred), or
Press the ""▶ Run"" button in the toolbar."
pre input,23
pre output,23
pre input,-15 + 2.718
pre output,-12.282
pre input,4 ** 3
pre output,64
pre input,(2 + 3 + 4) / 3
pre output,3.0
pre input,"# Only one value is displayed. Why?
9 + 10
13 / 4
21"
pre output,21
h3,Arithmetic operations
table,"[['Operation', 'Operator', 'Example', 'Value'], ['Addition', '+', '2 + 3', '5'], ['Subtraction', '-', '2 - 3', '-1'], ['Multiplication', '*', '2 * 3', '6'], ['Division', '/', '7 / 3', '2.66667'], ['Remainder', '%', '7 % 3', '1'], ['Exponentiation', '**', '2 ** 0.5', '1.41421']]"
h3,Python uses the typical order of operations – PEMDAS (BEDMAS? 🛏️)
pre input,5 * 2 ** 3
pre output,40
pre input,(5 * 2) ** 3
pre output,1000
h3,Activity
p,"In the cell below, write an expression that's equivalent to"
p,Try to use parentheses only when necessary.
pre input,
h2,Variables
h3,Motivation
p,"Below, we compute the number of seconds in a year."
pre input,60 * 60 * 24 * 365
pre output,31536000
p,"If we want to use the above value later in our notebook to find, say, the number of seconds in 12 years, we'd have to copy-and-paste the expression. This is inconvenient, and prone to introducing errors."
pre input,60 * 60 * 24 * 365 * 12
pre output,378432000
p,It would be great if we could store the initial value and refer to it later on!
h3,Variables and assignment statements
li,"A variable is a place to store a value so that it can be referred to later in our code. To define a variable, we use an assignment statement."
li,An assignment statement changes the meaning of the name to the left of the = symbol.
li,"The expression on the right-hand side of the = symbol is evaluated before being assigned to the name on the left-hand side.
e.g. zebra is bound to 9 (value) not 23 - 14 (expression)."
h3,Think of variable names as nametags!
pre input,"# Note: This is an assignment statement, not an expression.
# Assignment statements don't output anything!
a = 1"
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec02/images/a1.png
pre input,a = 2
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec02/images/a21.png
pre input,b = 2
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec02/images/ab2.png
h3,Example
p,"Note that before we use it in an assignment statement, triton has no meaning."
pre input,triton
pre output,"---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In[15], line 1
----> 1 triton

NameError: name 'triton' is not defined"
p,"After using it in an assignment statement, we can ask Python for its value."
pre input,triton = 15 - 5
pre input,triton
pre output,10
p,"Any time we use triton in an expression, 10 is substituted for it."
pre input,triton * -4
pre output,-40
p,"Note that the above expression did not change the value of triton, because we did not re-assign triton!"
pre input,triton
pre output,10
h3,Naming variables
li,Give your variables helpful names so that you know what they refer to.
li,"Variable names can contain uppercase and lowercase characters, the digits 0-9, and underscores.
They cannot start with a number.
They are case sensitive!"
p,"The following assignment statements are valid, but use poor variable names 😕."
pre input,six = 15
pre input,i_45love_chocolate_9999 = 60 * 60 * 24 * 365
p,"The following assignment statements are valid, and use good variable names ✅."
pre input,"seconds_per_hour = 60 * 60
hours_per_year = 24 * 365
seconds_per_year = seconds_per_hour * hours_per_year"
p,"The following ""assignment statements"" are invalid ❌."
pre input,7_days = 24 * 7
pre output,"Cell In[23], line 1
    7_days = 24 * 7
     ^
SyntaxError: invalid decimal literal"
pre input,3 = 2 + 1
pre output,"Cell In[24], line 1
    3 = 2 + 1
    ^
SyntaxError: cannot assign to literal"
h3,Assignment statements are not mathematical equations!
li,"Unlike in math, where $x = 3$ means the same thing as $3 = x$, assignment statements are not ""symmetric""."
li,"An assignment statement assigns (or ""binds"") the name on the left of = to the value to the right of =, nothing more."
pre input,x = 3
pre input,3 = x
pre output,"Cell In[26], line 1
    3 = x
    ^
SyntaxError: cannot assign to literal"
h3,A variable's value is set at the time of assignment
pre input,"uc = 2
sd = 3 + uc"
p,Assignment statements are not promises – the value of a variable can change!
pre input,uc = 7
p,"Note that even after changing uc, we did not change sd, so it is still the same as before."
pre input,sd
pre output,5
pre input,"side_length = 5
area = side_length ** 2
side_length = side_length + 2"
h3,Concept Check ✅ – Answer at cc.dsc10.com
p,Assume you have run the following three lines of code:
p,What are the values of side_length and area after execution?
p,"A. side_length = 5, area = 25"
p,"B. side_length = 5, area = 49"
p,"C. side_length = 7, area = 25"
p,"D. side_length = 7, area = 49"
p,E. None of the above
h3,Aside: hit tab to autocomplete a set name
pre input,
h2,Calling functions 📞
h3,Algebraic functions
li,"In math, functions take in some input and return some output."
li,We can determine the output of a function even if we pass in complicated-looking inputs.
h3,Python functions
li,Functions in Python work the same way functions in math do.
li,The inputs to functions are called arguments.
li,Python comes with a number of built-in functions that we are free to use.
li,"Calling a function, or using a function, means asking the function to ""run its recipe"" on the given input."
pre input,abs(-23)
pre output,23
h3,Some functions can take a variable number of arguments
pre input,"max(4, -8)"
pre output,4
pre input,"max(2, -3, -6, 10, -4)"
pre output,10
pre input,max(9)
pre output,"---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In[33], line 1
----> 1 max(9)

TypeError: 'int' object is not iterable"
pre input,"# Only two arguments!
max(9 + 10, 9 - 10)"
pre output,19
h3,Put ? after a function's name to see its documentation 📄
p,"Or use the help function, e.g. help(round)."
pre input,round(1.45678)
pre output,1
pre input,round?
pre input,"round(1.45678, 3)"
pre output,1.457
h3,Nested evaluation
p,We can nest many function calls to evaluate sophisticated expressions.
pre input,"min(abs(max(-1, -2, -3, min(4, -2))), max(5, 100))"
pre output,1
p,...how did that work?
pre input,show_nested_eval()
h3,Import statements
li,Python doesn't have everything we need built in.
li,"In order to gain additional functionality, we import modules through import statements."
li,Modules are collections of Python functions and values.
li,"Call these functions using the syntax module.function(), called ""dot notation""."
h3,Example: import math
p,"Some of the many functions built into the math module are sqrt, pow, and log."
pre input,import math
pre input,math.sqrt(16)
pre output,4.0
pre input,"math.pow(2, 5)"
pre output,32.0
pre input,"# What base is log?
math.log?"
pre input,"# Tab completion for browsing.
math."
pre output,"Cell In[44], line 2
    math.
         ^
SyntaxError: invalid syntax"
p,math also has constants built in!
pre input,math.pi
pre output,3.141592653589793
pre input,"x = 3
y = -2"
h3,Concept Check ✅ – Answer at cc.dsc10.com
p,Assume you have run the following statements:
p,"Which of these examples results in an error? For the ones that don't error, try to determine what they evaluate to!"
p,"A. abs(x, y)"
p,"B. math.pow(x, abs(y))"
p,"C. round(x, max(abs(y ** 2)))"
p,"D. math.pow(x, math.pow(y, x))"
p,E. More than one of the above
h2,Data types
h3,What's the difference? 🧐
pre input,4 / 2
pre output,2.0
pre input,5 - 3
pre output,2
p,"To us, 2.0 and 2 are the same number, $2$. But to Python, these appear to be different!"
h3,Data types
li,"Every value in Python has a type.
Use the type function to check a value's type."
li,"It's important to understand how different types work with different operations, as the results may not always be what we expect."
h3,Two numeric data types: int and float
li,int: An integer of any size.
li,float: A number with a decimal point.
h3,int
li,"If you add (+), subtract (-), multiply (*), or exponentiate (**) ints, the result will be another int."
li,"ints have arbitrary precision in Python, meaning that your calculations will always be exact."
pre input,7 - 15
pre output,-8
pre input,type(7 - 15)
pre output,int
pre input,2 ** 300
pre output,2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376
pre input,2 ** 3000
pre output,1230231922161117176931558813276752514640713895736833715766118029160058800614672948775360067838593459582429649254051804908512884180898236823585082482065348331234959350355845017413023320111360666922624728239756880416434478315693675013413090757208690376793296658810662941824493488451726505303712916005346747908623702673480919353936813105736620402352744776903840477883651100322409301983488363802930540482487909763484098253940728685132044408863734754271212592471778643949486688511721051561970432780747454823776808464180697103083861812184348565522740195796682622205511845512080552010310050255801589349645928001133745474220715013683413907542779063759833876101354235184245096670042160720629411581502371248008430447184842098610320580417992206662247328722122088513643683907670360209162653670641130936997002170500675501374723998766005827579300723253474890612250135171889174899079911291512399773872178519018229989376
h3,float
li,A float is specified using a decimal point.
li,A float might be printed using scientific notation.
pre input,3.2 + 2.5
pre output,5.7
pre input,type(3.2 + 2.5)
pre output,float
pre input,"# The result is in scientific notation: e+90 means ""times 10^90"".
2.0 ** 300"
pre output,2.037035976334486e+90
h3,The pitfalls of float
li,"floats have limited precision; after arithmetic, the final few decimal places can be wrong in unexpected ways."
li,"floats have limited size, though the limit is huge."
pre input,1 + 0.2
pre output,1.2
pre input,1 + 0.1 + 0.1
pre output,1.2000000000000002
pre input,2.0 ** 3000
pre output,"---------------------------------------------------------------------------
OverflowError                             Traceback (most recent call last)
Cell In[57], line 1
----> 1 2.0 ** 3000

OverflowError: (34, 'Result too large')"
h3,Converting between int and float
li,"If you mix ints and floats in an expression, the result will always be a float.
Note that when you divide two ints, you get a float back."
li,A value can be explicity coerced (i.e. converted) using the int and float functions.
pre input,2.0 + 3
pre output,5.0
pre input,12 / 2
pre output,6.0
pre input,"# Want an integer back.
int(12 / 2)"
pre output,6
pre input,"# int chops off the decimal point!
int(-2.9)"
pre output,-2
h3,Aside: Jupyter memory model
img,https://dsc-courses.github.io/dsc10-2024-sp/resources/lectures/lec02/images/elephant.png
p,Our notebook still remembers all of the variables we defined earlier in the lecture.
pre input,triton
pre output,10
li,"However, if you come back to your notebook after a few hours, it will usually ""forget"" all of the variables it once knew about."
li,"When this happens, you will need to run the cells in your notebook again."
li,See Navigating DataHub and Jupyter Notebooks for more.
h2,"Summary, next time"
h3,Summary
li,Expressions evaluate to values. Python will display the value of the last expression in a cell by default.
li,Python knows about all of the standard mathematical operators and follows PEMDAS.
li,Assignment statements allow us to bind values to variables.
li,"We can call functions in Python similar to how we call functions in math.
Python knows some functions by default, and import statements allow us to bring additional functionality from modules."
li,"All values in Python have a data type.
ints and floats are numbers.
ints are integers, while floats contain decimal points."
h3,Next time
li,"We'll learn about strings, a data type in Python designed to store text."
li,"We'll also learn how to store sequences, or many pieces of information, in a single variable."
p,Note: We will introduce some code in labs and homeworks as well. Not everything will be in lecture. You will learn by doing!
