lecture_number,lecture_title,section_name,section
6,Grouping and Data Visualization üìà,Announcements,"Quiz 1 is today in Center 109 during your assigned quiz session.

Check your email for a seating assignment and refer to this map to know where to sit.
20 minute paper-based quiz with no aids allowed.
The quiz covers Lectures 1 through 4, or BPD 1-9 in the babypandas notes.
This includes ""Example 4: What is the population density of Pennsylvania?"" which is in the Lecture 4 slides, but was covered in Lecture 5.
Study by doing practice problems, especially those from this week's discussion and previous quizzes.
Homework 1 is due Tuesday, but working on the homework is excellent preparation for the quiz. Check your email for a seating assignment and refer to this map to know where to sit. 20 minute paper-based quiz with no aids allowed. The quiz covers Lectures 1 through 4, or BPD 1-9 in the babypandas notes. This includes ""Example 4: What is the population density of Pennsylvania?"" which is in the Lecture 4 slides, but was covered in Lecture 5. Study by doing practice problems, especially those from this week's discussion and previous quizzes. Homework 1 is due Tuesday, but working on the homework is excellent preparation for the quiz. Make sure to try the ""challenge problems"" at the end of Lecture 5 and watch this walkthrough video for solutions."
6,Grouping and Data Visualization üìà,Agenda,Grouping. Why visualize? Terminology. Scatter plots. Line plots. Bar charts.
6,Grouping and Data Visualization üìà,Aside: Keyboard shortcuts,"There are several keyboard shortcuts built into Jupyter Notebooks designed to help you save time. To see them, either click the keyboard button in the toolbar above or hit the H key on your keyboard (as long as you're not actively editing a cell). Particularly useful shortcuts: Action
Keyboard shortcut


Run cell + jump to next cell
SHIFT + ENTER


Save the notebook
CTRL/CMD + S


Create new cell above/below
A/B


Delete cell
DD Action
Keyboard shortcut Action Keyboard shortcut Run cell + jump to next cell
SHIFT + ENTER Run cell + jump to next cell SHIFT + ENTER Save the notebook
CTRL/CMD + S Save the notebook CTRL/CMD + S Create new cell above/below
A/B Create new cell above/below A/B Delete cell
DD Delete cell DD"
6,Grouping and Data Visualization üìà,Question: Which region is the most populated?,"Input: states = bpd.read_csv('data/states.csv').set_index('State')
states = states.assign(Density=states.get('Population') / states.get('Land Area'))
states Region
Capital City
Population
Land Area
Party
Density


State








Alabama
South
Montgomery
5024279
50645
Republican
99.21


Alaska
West
Juneau
733391
570641
Republican
1.29


Arizona
West
Phoenix
7151502
113594
Republican
62.96


...
...
...
...
...
...
...


West Virginia
South
Charleston
1793716
24038
Republican
74.62


Wisconsin
Midwest
Madison
5893718
54158
Republican
108.82


Wyoming
West
Cheyenne
576851
97093
Republican
5.94 Region
Capital City
Population
Land Area
Party
Density  Region Capital City Population Land Area Party Density State State       Alabama
South
Montgomery
5024279
50645
Republican
99.21 Alabama South Montgomery 5024279 50645 Republican 99.21 Alaska
West
Juneau
733391
570641
Republican
1.29 Alaska West Juneau 733391 570641 Republican 1.29 Arizona
West
Phoenix
7151502
113594
Republican
62.96 Arizona West Phoenix 7151502 113594 Republican 62.96 ...
...
...
...
...
...
... ... ... ... ... ... ... ... West Virginia
South
Charleston
1793716
24038
Republican
74.62 West Virginia South Charleston 1793716 24038 Republican 74.62 Wisconsin
Midwest
Madison
5893718
54158
Republican
108.82 Wisconsin Midwest Madison 5893718 54158 Republican 108.82 Wyoming
West
Cheyenne
576851
97093
Republican
5.94 Wyoming West Cheyenne 576851 97093 Republican 5.94 50 rows √ó 6 columns"
6,Grouping and Data Visualization üìà,Organizing states by region with .groupby,"Observe what happens when we use the .groupby method on states with the argument 'Region'. Input: states.groupby('Region').sum() Population
Land Area
Density


Region





Midwest
68985454
750524
1298.78


Northeast
57609148
161912
4957.49


South
125576562
868356
3189.37


West
78588572
1751054
881.62 Population
Land Area
Density  Population Land Area Density Region Region    Midwest
68985454
750524
1298.78 Midwest 68985454 750524 1298.78 Northeast
57609148
161912
4957.49 Northeast 57609148 161912 4957.49 South
125576562
868356
3189.37 South 125576562 868356 3189.37 West
78588572
1751054
881.62 West 78588572 1751054 881.62"
6,Grouping and Data Visualization üìà,An illustrative example: Pets üê± üê∂üêπ,"Consider the DataFrame pets, shown below. Species
Color
Weight
Age


0
dog
black
40
5.0


1
cat
golden
15
8.0


2
cat
black
20
9.0


3
dog
white
80
2.0


4
dog
golden
25
0.5


5
hamster
golden
1
3.0 Species
Color
Weight
Age  Species Color Weight Age 0
dog
black
40
5.0 0 dog black 40 5.0 1
cat
golden
15
8.0 1 cat golden 15 8.0 2
cat
black
20
9.0 2 cat black 20 9.0 3
dog
white
80
2.0 3 dog white 80 2.0 4
dog
golden
25
0.5 4 dog golden 25 0.5 5
hamster
golden
1
3.0 5 hamster golden 1 3.0 Let's see what happens under the hood when we run pets.groupby('Species').mean(). Input: show_grouping_animation()"
6,Grouping and Data Visualization üìà,Back to states: which region is most populated?,"Input: states.groupby('Region').sum() Population
Land Area
Density


Region





Midwest
68985454
750524
1298.78


Northeast
57609148
161912
4957.49


South
125576562
868356
3189.37


West
78588572
1751054
881.62 Population
Land Area
Density  Population Land Area Density Region Region    Midwest
68985454
750524
1298.78 Midwest 68985454 750524 1298.78 Northeast
57609148
161912
4957.49 Northeast 57609148 161912 4957.49 South
125576562
868356
3189.37 South 125576562 868356 3189.37 West
78588572
1751054
881.62 West 78588572 1751054 881.62 Input: # Note the use of .index ‚Äì remember, the index isn't a column!
(
    states
    .groupby('Region')
    .sum()
    .sort_values(by='Population', ascending=False)
    .index[0]
) Output: 'South'"
6,Grouping and Data Visualization üìà,Using .groupby in general,"In short, .groupby aggregates (collects) all rows with the same value in a specified column (e.g. 'Region') into a single row in the resulting DataFrame, using an aggregation method (e.g. .sum()) to combine values from different rows with the same value in the specified column. To use .groupby: Choose a column to group by.

.groupby(column_name) will gather rows which have the same value in the specified column (column_name).
In the resulting DataFrame, there will be one row for every unique value in that column. .groupby(column_name) will gather rows which have the same value in the specified column (column_name). In the resulting DataFrame, there will be one row for every unique value in that column. Choose an aggregation method.

The aggregation method will be applied within each group.
The aggregation method is applied individually to each column.
If it doesn't make sense to use the aggregation method on a column, the column is dropped from the output.


Common aggregation methods include .count(), .sum(), .mean(), .median(), .max(), and .min(). The aggregation method will be applied within each group. The aggregation method is applied individually to each column. If it doesn't make sense to use the aggregation method on a column, the column is dropped from the output.   Common aggregation methods include .count(), .sum(), .mean(), .median(), .max(), and .min(). Input: states Region
Capital City
Population
Land Area
Party
Density


State








Alabama
South
Montgomery
5024279
50645
Republican
99.21


Alaska
West
Juneau
733391
570641
Republican
1.29


Arizona
West
Phoenix
7151502
113594
Republican
62.96


...
...
...
...
...
...
...


West Virginia
South
Charleston
1793716
24038
Republican
74.62


Wisconsin
Midwest
Madison
5893718
54158
Republican
108.82


Wyoming
West
Cheyenne
576851
97093
Republican
5.94 Region
Capital City
Population
Land Area
Party
Density  Region Capital City Population Land Area Party Density State State       Alabama
South
Montgomery
5024279
50645
Republican
99.21 Alabama South Montgomery 5024279 50645 Republican 99.21 Alaska
West
Juneau
733391
570641
Republican
1.29 Alaska West Juneau 733391 570641 Republican 1.29 Arizona
West
Phoenix
7151502
113594
Republican
62.96 Arizona West Phoenix 7151502 113594 Republican 62.96 ...
...
...
...
...
...
... ... ... ... ... ... ... ... West Virginia
South
Charleston
1793716
24038
Republican
74.62 West Virginia South Charleston 1793716 24038 Republican 74.62 Wisconsin
Midwest
Madison
5893718
54158
Republican
108.82 Wisconsin Midwest Madison 5893718 54158 Republican 108.82 Wyoming
West
Cheyenne
576851
97093
Republican
5.94 Wyoming West Cheyenne 576851 97093 Republican 5.94 50 rows √ó 6 columns Input: states.groupby('Region').sum() Population
Land Area
Density


Region





Midwest
68985454
750524
1298.78


Northeast
57609148
161912
4957.49


South
125576562
868356
3189.37


West
78588572
1751054
881.62 Population
Land Area
Density  Population Land Area Density Region Region    Midwest
68985454
750524
1298.78 Midwest 68985454 750524 1298.78 Northeast
57609148
161912
4957.49 Northeast 57609148 161912 4957.49 South
125576562
868356
3189.37 South 125576562 868356 3189.37 West
78588572
1751054
881.62 West 78588572 1751054 881.62 Tip: look for keywords ""per,"" ""for each,"" and ""indexed by"" when solving problems. The aggregation method is applied separately to each column. If it does not make sense to apply the aggregation method to a certain column, the column will disappear. üêáüé© Since the aggregation method is applied to each column separately, the rows of the resulting DataFrame need to be interpreted with care. Input: states.groupby('Region').max() Capital City
Population
Land Area
Party
Density


Region







Midwest
Topeka
12812508
81759
Republican
288.77


Northeast
Trenton
20201249
47126
Republican
1263.12


South
Tallahassee
29145505
261232
Republican
636.37


West
Santa Fe
39538223
570641
Republican
253.81 Capital City
Population
Land Area
Party
Density  Capital City Population Land Area Party Density Region Region      Midwest
Topeka
12812508
81759
Republican
288.77 Midwest Topeka 12812508 81759 Republican 288.77 Northeast
Trenton
20201249
47126
Republican
1263.12 Northeast Trenton 20201249 47126 Republican 1263.12 South
Tallahassee
29145505
261232
Republican
636.37 South Tallahassee 29145505 261232 Republican 636.37 West
Santa Fe
39538223
570641
Republican
253.81 West Santa Fe 39538223 570641 Republican 253.81 Input: 12812508 / 81759 == 288.77 Output: False The column names don't make sense after grouping with the .count() aggregation method. Input: states.groupby('Region').count() Capital City
Population
Land Area
Party
Density


Region







Midwest
12
12
12
12
12


Northeast
9
9
9
9
9


South
16
16
16
16
16


West
13
13
13
13
13 Capital City
Population
Land Area
Party
Density  Capital City Population Land Area Party Density Region Region      Midwest
12
12
12
12
12 Midwest 12 12 12 12 12 Northeast
9
9
9
9
9 Northeast 9 9 9 9 9 South
16
16
16
16
16 South 16 16 16 16 16 West
13
13
13
13
13 West 13 13 13 13 13"
6,Grouping and Data Visualization üìà,"Dropping, renaming, and reordering columns","Consider dropping unneeded columns and renaming columns as follows: Use .assign to create a new column containing the same values as the old column(s). Use .drop(columns=list_of_column_labels) to drop the old column(s).

Alternatively, use .get(list_of_column_labels) to keep only the columns in the given list. The columns will appear in the order you specify, so this is also useful for reordering columns! Alternatively, use .get(list_of_column_labels) to keep only the columns in the given list. The columns will appear in the order you specify, so this is also useful for reordering columns! Input: states_by_region = states.groupby('Region').count()
states_by_region = states_by_region.assign(
                    States=states_by_region.get('Capital City')
                    ).get(['States'])
states_by_region States


Region



Midwest
12


Northeast
9


South
16


West
13 States  States Region Region  Midwest
12 Midwest 12 Northeast
9 Northeast 9 South
16 South 16 West
13 West 13"
6,Grouping and Data Visualization üìà,Little Women,"In Lecture 1, we were able to answer questions about the plot of Little Women without having to read the novel and without having to understand Python code. Some of those questions included: Who is the main character? Which pair of characters gets married in Chapter 35? We answered these questions from a data visualization alone! Input: bpd.read_csv('data/lw_counts.csv').plot(x='Chapter');"
6,Grouping and Data Visualization üìà,Napoleon's March,"""Probably the best statistical graphic ever drawn, this map by Charles Joseph Minard portrays the losses suffered by Napoleon's army in the Russian campaign of 1812."" (source)"
6,Grouping and Data Visualization üìà,Why visualize?,"Computers are better than humans at crunching numbers, but humans are better at identifying visual patterns. Visualizations allow us to understand lots of data quickly ‚Äì they make it easier to spot trends and communicate our results with others. There are many types of visualizations; in this class, we'll look at scatter plots, line plots, bar charts, and histograms, but there are many others.

The right choice depends on the type of data. The right choice depends on the type of data."
6,Grouping and Data Visualization üìà,Individuals and variables,Individual (row): Person/place/thing for which data is recorded. Also called an observation. Variable (column): Something that is recorded for each individual. Also called a feature.
6,Grouping and Data Visualization üìà,Types of variables,"There are two main types of variables: Numerical: It makes sense to do arithmetic with the values. Categorical: Values fall into categories, that may or may not have some order to them. Note that here, ""variable"" does not mean a variable in Python, but rather it means a column in a DataFrame."
6,Grouping and Data Visualization üìà,Examples of numerical variables,"Salaries of NBA players üèÄ.

Individual: An NBA player.
Variable: Their salary. Individual: An NBA player. Variable: Their salary. Company's annual profit üí∞.

Individual: A company.
Variable: Its annual profit. Individual: A company. Variable: Its annual profit. Flu shots administered per day üíâ.

Individual: Date.
Variable: Number of flu shots administered on that date. Individual: Date. Variable: Number of flu shots administered on that date."
6,Grouping and Data Visualization üìà,Examples of categorical variables,"Movie genres üé¨.

Individual: A movie.
Variable: Its genre. Individual: A movie. Variable: Its genre. Zip codes üè†.

Individual: US resident.
Variable: Zip code.
Even though they look like numbers, zip codes are categorical (arithmetic doesn't make sense). Individual: US resident. Variable: Zip code. Even though they look like numbers, zip codes are categorical (arithmetic doesn't make sense). Level of prior programming experience for students in DSC 10 üßë‚Äçüéì.

Individual: Student in DSC 10.
Variable: Their level of prior programming experience, e.g. none, low, medium, or high.
There is an order to these categories! Individual: Student in DSC 10. Variable: Their level of prior programming experience, e.g. none, low, medium, or high. There is an order to these categories!"
6,Grouping and Data Visualization üìà,Concept Check ‚úÖ ‚Äì Answer at cc.dsc10.com,"Which of these is not a numerical variable? A. Fuel economy in miles per gallon. B. Number of quarters at UCSD. C. College at UCSD (Sixth, Seventh, etc). D. Bank account number. E. More than one of these are not numerical variables."
6,Grouping and Data Visualization üìà,Types of visualizations,"The type of visualization we create depends on the kinds of variables we're visualizing. Scatter plot: Numerical vs. numerical. Line plot: Sequential numerical (time) vs. numerical. Bar chart: Categorical vs. numerical. Histogram: Numerical.

Will cover next time. Will cover next time. We may interchange the words ""plot"", ""chart"", and ""graph""; they all mean the same thing."
6,Grouping and Data Visualization üìà,The data: exoplanets discovered by NASA ü™ê,"An exoplanet is a planet outside our solar system. NASA has discovered over 5,000 exoplanets so far in its search for signs of life beyond Earth. üëΩ Column
Contents Column
Contents Column Contents   'Distance'| Distance from Earth, in light years.
'Magnitude'|  Apparent magnitude, which measures brightness in such a way that brighter objects have lower values.
'Type'|  Categorization of planet based on its composition and size.
'Year'|   When the planet was discovered.
'Detection'|  The method of detection used to discover the planet.
'Mass'|   The ratio of the planet's mass to Earth's mass. 
'Radius'|  The ratio of the planet's radius to Earth's radius. Input: exo = bpd.read_csv('data/exoplanets.csv').set_index('Name')
exo Distance
Magnitude
Type
Year
Detection
Mass
Radius


Name









11 Comae Berenices b
304.0
4.72
Gas Giant
2007
Radial Velocity
6165.90
11.88


11 Ursae Minoris b
409.0
5.01
Gas Giant
2009
Radial Velocity
4684.81
11.99


14 Andromedae b
246.0
5.23
Gas Giant
2008
Radial Velocity
1525.58
12.65


...
...
...
...
...
...
...
...


YZ Ceti b
12.0
12.07
Terrestrial
2017
Radial Velocity
0.70
0.91


YZ Ceti c
12.0
12.07
Super Earth
2017
Radial Velocity
1.14
1.05


YZ Ceti d
12.0
12.07
Super Earth
2017
Radial Velocity
1.09
1.03 Distance
Magnitude
Type
Year
Detection
Mass
Radius  Distance Magnitude Type Year Detection Mass Radius Name Name        11 Comae Berenices b
304.0
4.72
Gas Giant
2007
Radial Velocity
6165.90
11.88 11 Comae Berenices b 304.0 4.72 Gas Giant 2007 Radial Velocity 6165.90 11.88 11 Ursae Minoris b
409.0
5.01
Gas Giant
2009
Radial Velocity
4684.81
11.99 11 Ursae Minoris b 409.0 5.01 Gas Giant 2009 Radial Velocity 4684.81 11.99 14 Andromedae b
246.0
5.23
Gas Giant
2008
Radial Velocity
1525.58
12.65 14 Andromedae b 246.0 5.23 Gas Giant 2008 Radial Velocity 1525.58 12.65 ...
...
...
...
...
...
...
... ... ... ... ... ... ... ... ... YZ Ceti b
12.0
12.07
Terrestrial
2017
Radial Velocity
0.70
0.91 YZ Ceti b 12.0 12.07 Terrestrial 2017 Radial Velocity 0.70 0.91 YZ Ceti c
12.0
12.07
Super Earth
2017
Radial Velocity
1.14
1.05 YZ Ceti c 12.0 12.07 Super Earth 2017 Radial Velocity 1.14 1.05 YZ Ceti d
12.0
12.07
Super Earth
2017
Radial Velocity
1.09
1.03 YZ Ceti d 12.0 12.07 Super Earth 2017 Radial Velocity 1.09 1.03 5043 rows √ó 7 columns"
6,Grouping and Data Visualization üìà,Scatter plots,"What is the relationship between 'Distance' and 'Magnitude'? Input: exo.plot(kind='scatter', x='Distance', y='Magnitude'); Further planets have greater 'Magnitude' (meaning they are less bright), which makes sense. Further planets have greater 'Magnitude' (meaning they are less bright), which makes sense. The data appears curved because 'Magnitude' is measured on a logarithmic scale. A decrease of one unit in 'Magnitude' corresponds to a 2.5 times increase in brightness. The data appears curved because 'Magnitude' is measured on a logarithmic scale. A decrease of one unit in 'Magnitude' corresponds to a 2.5 times increase in brightness. Input: df.plot(
  kind='scatter', 
  x=x_column_for_horizontal, 
  y=y_column_for_vertical
)"
6,Grouping and Data Visualization üìà,Scatter plots,"Scatter plots visualize the relationship between two numerical variables. To create one from a DataFrame df, usedf.plot(

kind='scatter',
x=x_column_for_horizontal,
y=y_column_for_vertical
) kind='scatter', x=x_column_for_horizontal, y=y_column_for_vertical ) Input: exo[exo.get('Distance') < 10000].plot(kind='scatter', x='Distance', y='Magnitude');"
6,Grouping and Data Visualization üìà,Line plots,"How has the 'Magnitude' of newly discovered exoplanets changed over time? Input: # There were multiple exoplanets discovered each year.
# What operation can we apply to this DataFrame so that there is one row per year?
exo Distance
Magnitude
Type
Year
Detection
Mass
Radius


Name









11 Comae Berenices b
304.0
4.72
Gas Giant
2007
Radial Velocity
6165.90
11.88


11 Ursae Minoris b
409.0
5.01
Gas Giant
2009
Radial Velocity
4684.81
11.99


14 Andromedae b
246.0
5.23
Gas Giant
2008
Radial Velocity
1525.58
12.65


...
...
...
...
...
...
...
...


YZ Ceti b
12.0
12.07
Terrestrial
2017
Radial Velocity
0.70
0.91


YZ Ceti c
12.0
12.07
Super Earth
2017
Radial Velocity
1.14
1.05


YZ Ceti d
12.0
12.07
Super Earth
2017
Radial Velocity
1.09
1.03 Distance
Magnitude
Type
Year
Detection
Mass
Radius  Distance Magnitude Type Year Detection Mass Radius Name Name        11 Comae Berenices b
304.0
4.72
Gas Giant
2007
Radial Velocity
6165.90
11.88 11 Comae Berenices b 304.0 4.72 Gas Giant 2007 Radial Velocity 6165.90 11.88 11 Ursae Minoris b
409.0
5.01
Gas Giant
2009
Radial Velocity
4684.81
11.99 11 Ursae Minoris b 409.0 5.01 Gas Giant 2009 Radial Velocity 4684.81 11.99 14 Andromedae b
246.0
5.23
Gas Giant
2008
Radial Velocity
1525.58
12.65 14 Andromedae b 246.0 5.23 Gas Giant 2008 Radial Velocity 1525.58 12.65 ...
...
...
...
...
...
...
... ... ... ... ... ... ... ... ... YZ Ceti b
12.0
12.07
Terrestrial
2017
Radial Velocity
0.70
0.91 YZ Ceti b 12.0 12.07 Terrestrial 2017 Radial Velocity 0.70 0.91 YZ Ceti c
12.0
12.07
Super Earth
2017
Radial Velocity
1.14
1.05 YZ Ceti c 12.0 12.07 Super Earth 2017 Radial Velocity 1.14 1.05 YZ Ceti d
12.0
12.07
Super Earth
2017
Radial Velocity
1.09
1.03 YZ Ceti d 12.0 12.07 Super Earth 2017 Radial Velocity 1.09 1.03 5043 rows √ó 7 columns Let's calculate the average 'Magnitude' of all exoplanets discovered in each 'Year'. Input: exo.groupby('Year').mean() Distance
Magnitude
Mass
Radius


Year






1995
50.00
5.45
146.20
13.97


1996
51.33
5.12
1020.67
13.09


1997
57.00
5.41
332.10
13.53


...
...
...
...
...


2021
1944.22
13.01
255.42
4.44


2022
508.61
10.62
943.16
6.77


2023
451.89
12.09
162.78
7.12 Distance
Magnitude
Mass
Radius  Distance Magnitude Mass Radius Year Year     1995
50.00
5.45
146.20
13.97 1995 50.00 5.45 146.20 13.97 1996
51.33
5.12
1020.67
13.09 1996 51.33 5.12 1020.67 13.09 1997
57.00
5.41
332.10
13.53 1997 57.00 5.41 332.10 13.53 ...
...
...
...
... ... ... ... ... ... 2021
1944.22
13.01
255.42
4.44 2021 1944.22 13.01 255.42 4.44 2022
508.61
10.62
943.16
6.77 2022 508.61 10.62 943.16 6.77 2023
451.89
12.09
162.78
7.12 2023 451.89 12.09 162.78 7.12 29 rows √ó 4 columns Input: exo.groupby('Year').mean().plot(kind='line', y='Magnitude'); It looks like the brightest planets were discovered first, which makes sense. It looks like the brightest planets were discovered first, which makes sense. NASA's Kepler space telescope began its nine-year mission in 2009, leading to a boom in the discovery of exoplanets. NASA's Kepler space telescope began its nine-year mission in 2009, leading to a boom in the discovery of exoplanets. Input: df.plot(
  kind='line', 
  x=x_column_for_horizontal, 
  y=y_column_for_vertical
)"
6,Grouping and Data Visualization üìà,Line plots,"Line plots show trends in numerical variables over time. To create one from a DataFrame df, usedf.plot(

kind='line',
x=x_column_for_horizontal,
y=y_column_for_vertical
) kind='line', x=x_column_for_horizontal, y=y_column_for_vertical ) Input: YouTubeVideo('glzZ04D1kDg')"
6,Grouping and Data Visualization üìà,Bar charts,"How big are each of the different 'Type's of exoplanets, on average? Input: types = exo.groupby('Type').mean()
types Distance
Magnitude
Year
Mass
Radius


Type







Gas Giant
1096.40
10.30
2013.73
1472.39
12.74


Neptune-like
2189.02
13.52
2016.59
15.28
3.11


Super Earth
1916.26
13.85
2016.43
5.81
1.58


Terrestrial
1373.60
13.45
2016.37
1.62
0.85 Distance
Magnitude
Year
Mass
Radius  Distance Magnitude Year Mass Radius Type Type      Gas Giant
1096.40
10.30
2013.73
1472.39
12.74 Gas Giant 1096.40 10.30 2013.73 1472.39 12.74 Neptune-like
2189.02
13.52
2016.59
15.28
3.11 Neptune-like 2189.02 13.52 2016.59 15.28 3.11 Super Earth
1916.26
13.85
2016.43
5.81
1.58 Super Earth 1916.26 13.85 2016.43 5.81 1.58 Terrestrial
1373.60
13.45
2016.37
1.62
0.85 Terrestrial 1373.60 13.45 2016.37 1.62 0.85 Input: types.plot(kind='barh', y='Radius'); Input: types.plot(kind='barh', y='Mass'); It looks like the 'Gas Giant's are aptly named! Input: df.plot(
  kind='barh', 
  x=categorical_column_name, 
  y=numerical_column_name
)"
6,Grouping and Data Visualization üìà,Bar charts,"Bar charts visualize the relationship between a categorical variable and a numerical variable. In a bar chart...

The thickness and spacing of bars is arbitrary.
The order of the categorical labels doesn't matter. The thickness and spacing of bars is arbitrary. The order of the categorical labels doesn't matter. To create one from a DataFrame df, usedf.plot(

kind='barh',
x=categorical_column_name,
y=numerical_column_name
) kind='barh', x=categorical_column_name, y=numerical_column_name ) What are the most popular 'Detection' methods for discovering exoplanets? Input: # Count how many exoplanets are discovered by each detection method.
popular_detection = exo.groupby('Detection').count()
popular_detection Distance
Magnitude
Type
Year
Mass
Radius


Detection








Astrometry
1
1
1
1
1
1


Direct Imaging
50
50
50
50
50
50


Disk Kinematics
1
1
1
1
1
1


...
...
...
...
...
...
...


Radial Velocity
1019
1019
1019
1019
1019
1019


Transit
3914
3914
3914
3914
3914
3914


Transit Timing Variations
23
23
23
23
23
23 Distance
Magnitude
Type
Year
Mass
Radius  Distance Magnitude Type Year Mass Radius Detection Detection       Astrometry
1
1
1
1
1
1 Astrometry 1 1 1 1 1 1 Direct Imaging
50
50
50
50
50
50 Direct Imaging 50 50 50 50 50 50 Disk Kinematics
1
1
1
1
1
1 Disk Kinematics 1 1 1 1 1 1 ...
...
...
...
...
...
... ... ... ... ... ... ... ... Radial Velocity
1019
1019
1019
1019
1019
1019 Radial Velocity 1019 1019 1019 1019 1019 1019 Transit
3914
3914
3914
3914
3914
3914 Transit 3914 3914 3914 3914 3914 3914 Transit Timing Variations
23
23
23
23
23
23 Transit Timing Variations 23 23 23 23 23 23 11 rows √ó 6 columns Input: # Give columns more meaningful names and eliminate redundancy.
popular_detection = (popular_detection.assign(Count=popular_detection.get('Distance'))
                                      .get(['Count'])
                                      .sort_values(by='Count', ascending=False)
                    )
popular_detection Count


Detection



Transit
3914


Radial Velocity
1019


Direct Imaging
50


...
...


Astrometry
1


Disk Kinematics
1


Pulsar Timing
1 Count  Count Detection Detection  Transit
3914 Transit 3914 Radial Velocity
1019 Radial Velocity 1019 Direct Imaging
50 Direct Imaging 50 ...
... ... ... Astrometry
1 Astrometry 1 Disk Kinematics
1 Disk Kinematics 1 Pulsar Timing
1 Pulsar Timing 1 11 rows √ó 1 columns Input: # Notice that the bars appear in the opposite order relative to the DataFrame.
popular_detection.plot(kind='barh', y='Count'); Input: # Change ""barh"" to ""bar"" to get a vertical bar chart. 
# These are harder to read, but the bars do appear in the same order as the DataFrame.
popular_detection.plot(kind='bar', y='Count');"
6,Grouping and Data Visualization üìà,Multiple plots on the same axes,"Can we look at both the average 'Magnitude' and the average 'Radius' for each 'Type' at the same time? Input: types.get(['Magnitude', 'Radius']).plot(kind='barh'); How did we do that?"
6,Grouping and Data Visualization üìà,Overlaying plots,"When calling .plot, if we omit the y=column_name argument, all other columns are plotted. Input: types Distance
Magnitude
Year
Mass
Radius


Type







Gas Giant
1096.40
10.30
2013.73
1472.39
12.74


Neptune-like
2189.02
13.52
2016.59
15.28
3.11


Super Earth
1916.26
13.85
2016.43
5.81
1.58


Terrestrial
1373.60
13.45
2016.37
1.62
0.85 Distance
Magnitude
Year
Mass
Radius  Distance Magnitude Year Mass Radius Type Type      Gas Giant
1096.40
10.30
2013.73
1472.39
12.74 Gas Giant 1096.40 10.30 2013.73 1472.39 12.74 Neptune-like
2189.02
13.52
2016.59
15.28
3.11 Neptune-like 2189.02 13.52 2016.59 15.28 3.11 Super Earth
1916.26
13.85
2016.43
5.81
1.58 Super Earth 1916.26 13.85 2016.43 5.81 1.58 Terrestrial
1373.60
13.45
2016.37
1.62
0.85 Terrestrial 1373.60 13.45 2016.37 1.62 0.85 Input: types.plot(kind='barh');"
6,Grouping and Data Visualization üìà,Selecting multiple columns at once,"To select multiple columns, use .get([column_1, ..., column_k]). Passing a list of column labels to .get returns a DataFrame.

.get([column_name]) will return a DataFrame with just one column! .get([column_name]) will return a DataFrame with just one column! Input: types Distance
Magnitude
Year
Mass
Radius


Type







Gas Giant
1096.40
10.30
2013.73
1472.39
12.74


Neptune-like
2189.02
13.52
2016.59
15.28
3.11


Super Earth
1916.26
13.85
2016.43
5.81
1.58


Terrestrial
1373.60
13.45
2016.37
1.62
0.85 Distance
Magnitude
Year
Mass
Radius  Distance Magnitude Year Mass Radius Type Type      Gas Giant
1096.40
10.30
2013.73
1472.39
12.74 Gas Giant 1096.40 10.30 2013.73 1472.39 12.74 Neptune-like
2189.02
13.52
2016.59
15.28
3.11 Neptune-like 2189.02 13.52 2016.59 15.28 3.11 Super Earth
1916.26
13.85
2016.43
5.81
1.58 Super Earth 1916.26 13.85 2016.43 5.81 1.58 Terrestrial
1373.60
13.45
2016.37
1.62
0.85 Terrestrial 1373.60 13.45 2016.37 1.62 0.85 Input: types.get(['Magnitude', 'Radius']) Magnitude
Radius


Type




Gas Giant
10.30
12.74


Neptune-like
13.52
3.11


Super Earth
13.85
1.58


Terrestrial
13.45
0.85 Magnitude
Radius  Magnitude Radius Type Type   Gas Giant
10.30
12.74 Gas Giant 10.30 12.74 Neptune-like
13.52
3.11 Neptune-like 13.52 3.11 Super Earth
13.85
1.58 Super Earth 13.85 1.58 Terrestrial
13.45
0.85 Terrestrial 13.45 0.85 Input: types.get(['Magnitude', 'Radius']).plot(kind='barh');"
6,Grouping and Data Visualization üìà,Summary,"Visualizations make it easy to extract patterns from datasets. There are two main types of variables: categorical and numerical. The types of the variables we're visualizing inform our choice of which type of visualization to use. Today, we looked at scatter plots, line plots, and bar charts. Next time: histograms."
